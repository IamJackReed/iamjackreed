---
title:  "The Biggest Assumption Made In Software Development"
subtitle: "Where are the requirements coming from?"
author: "Jack Reed"
avatar: "img/author.png"
image: "img/f.jpg"
date:   2017-09-04 12:12:12
---
The single biggest assumption made when building software is that the requirements (features) that get created are the right ones. Here are some things to consider that I think can help counteract this problem. First of all, always ask and understand '_Where are the requirements (features) actually coming from?_', '_What will be the cost of delay?'_', _What might be the impact of delivering a useless feature_?, and be mindful of '_Confirmation Bias_'.

The word itself 'requirement', implies that it is something that is needed. I mentioned this in a previous post, that there are many cases where the customer comes first, but when it comes to ideas about product functionality, I’m afraid the ‘customer’ isn’t always right. In fact, their ideas are often bad ones. They may ask for AI shooting drones with lasers, but users don't know what they want, they know what they want once you've built it for them. If the requirements (features) are coming from someone within the organisation, then how has it been decided that these are actual requirements (features)? As '_Kent Beck_' (the founder of Extreme Programming) puts it '_Software development has been steered wrong by the word 'requirement' defined in the dictionary as "Something mandatory or obligatory". The word carries a connotation of absolution and permanence, inhibitors to embracing change. And the word 'requirement' is just plain wrong_'. Based on the research shown in the 2015 CHOAS report, it suggests that even if projects were considered successful (delivered on time, in scope and within budget), only two thirds of the features provide value. Considering that the success of software is determined by the actual outcomes, and impact the software has after it has been delivered, then to me, it's all the more reason to use an experimental approach in product delivery. Agile in the short sense of the word, just means fast, so delivery wants to be fast in this case because, the requirements (features) need to be validated to a certain degree first in order to make sure that they are, in fact providing value. Then investing more time and effort can be rightly justified.

#### Confirmation Bias
Confirmation Bias is something to be mindful of, an example of this could be: Imagine you send a message to someone you know, a few days go by, and you haven't heard a response from them. Without meaning to, you may start to find yourself jumping to conclusions in thinking that this person is deliberately ignoring you. The problem with this, is that after a while you can start to convince yourself that this is in fact true. Confirmation Bias occurs from the direct influence of desire on beliefs. When we want a certain hypothesis to be true, or we believe a certain feature will bring x amount of value, we can end up believing it to be true before it's actually been proven. This error leads to us to stop gathering information when the evidence gathered so far confirms the views one would like to be true.

#### Cost Of Delay & Delivering Useless Features
Precious time can be lost when analysing a proposed requirement, this tends to be a common problem found when scaling agile with the organisation having a heavy governance that want to spend their time and focus on estimating costs before any work starts. Although estimated costs are important factor to consider, I think it is far more important to understand if whatever it is that is being built, is in fact even going to be used by the end user. As far as costs are concerned, what about the often overlooked cost of delay, and the cost associated with delivering features that provides 0 value, or worse, a negative value! Cost of delay combines urgency and value, these are generally two things that we are not very good at distinguishing between. To help make better decisions, we need to understand not just how valuable something is, but how urgent it is. I think it's worth considering this:
Every time a feature (valuable or not) is implemented it adds complexity, this then requires time and effort to test and maintain.
The more complexity that is added to a system, then the harder it becomes to add more features.
Loss of opportunity costs from not delivering a feature that could have actually brought value.
Reputation costs from delivering a feature with negative value

#### Conclusions
When it comes to defining requirements (features), I think it works best when you're able to involve the entire team, they should be aware of the big picture and desired outcomes. A popular template used for writing story titles is: '_As a [persona], I want [to perform some action], so that I get [some benefit]_', and an interesting alternative to this is an idea by '_Jeff Gothelf_' who has a great template for writing tactical hypothesis statements in his book [Lean UX](http://www.jeffgothelf.com/lean-ux-book/): '_We believe that we will achieve [KPI] if [persona] will attain [user goal] with [feature]._'
If you're going to make assumptions, then assume that the chances are high that the requirements (features) being built are wrong.
Consider the consequences of delivering useless requirements (features). An interesting article by '_David Mierke_' [3 Reasons You Can’t Just Ask Customers What They Want](https://techcrunch.com/2014/11/15/3-reasons-why-you-cant-just-ask-customers-what-they-want/)
Agile in the short sense of the word, just means fast. It has to be quick and economical to deliver small vertical slices of work frequently, so that we can learn how we can improve, not just in the way we work, but to create feedback loops so that it can help us validate what is being built.
